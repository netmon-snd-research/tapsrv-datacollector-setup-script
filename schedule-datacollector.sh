#!/bin/bash

# Script to schedule the data collectors to run based on configuration

# Color definitions for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Schedule parameters
start_time=$(date -d "2025-07-21 00:00:00" "+%Y-%m-%d %H:%M:%S") # Default start time
interval=7 # Default interval in days

# Function to print success message
print_success() {
    echo -e "${GREEN}$1${NC}"
}

# Function to print error message
print_error() {
    echo -e "${RED}$1${NC}"
}

# Function to print info message
print_info() {
    echo -e "${BLUE}$1${NC}"
}

# Function to print warning message
print_warning() {
    echo -e "${YELLOW}$1${NC}"
}

# Configuration variables - set defaults and allow override
# Set to "true" to enable, any other value to disable
enable_argus="true"
enable_zeek="true"
enable_nfpcapd="true"

# Default interface is ens3f0np0, can be overridden
argus_interface="ens3f0np0"
nfpcapd_interface="ens3f0np0"

# Default output directories
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
argus_outputdir="${SCRIPT_DIR}/log/argus"
nfpcapd_outputdir="${SCRIPT_DIR}/log/nfpcapd"

# Check if configuration file exists and load it
CONFIG_FILE="${SCRIPT_DIR}/enabled-datacollector.txt"
if [ -f "$CONFIG_FILE" ]; then
    print_info "Loading configuration from $CONFIG_FILE"
    source "$CONFIG_FILE"
fi

# Set timezone to GMT+8 (Jakarta)
print_info "Setting timezone to Asia/Jakarta (GMT+8)..."
if [ -f /etc/timezone ]; then
    # Debian/Ubuntu
    sudo timedatectl set-timezone Asia/Jakarta
elif [ -f /etc/localtime ]; then
    # CentOS/RHEL
    sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
else
    print_warning "Could not set timezone automatically. Please set timezone to Asia/Jakarta manually."
fi



# Parse arguments for custom start time and interval
while [[ $# -gt 0 ]]; do
    case "$1" in
        --start-time=*)
            start_time="${1#*=}"
            shift
            ;;
        --interval=*)
            interval="${1#*=}"
            shift
            ;;
        *)
            print_error "Unknown parameter: $1"
            exit 1
            ;;
    esac
done

# Linux date command
# Convert start time to cron format
start_minute=$(date -d "$start_time" "+%M")
start_hour=$(date -d "$start_time" "+%H")
start_day=$(date -d "$start_time" "+%d")
start_month=$(date -d "$start_time" "+%m")
start_day_of_week=$(date -d "$start_time" "+%w")

# Calculate stop time (interval days later)
# Fix: Use a more reliable way to add days in GNU date
# Note: For GNU date in Linux, we construct the expression differently to ensure proper calculation
parsed_start=$(date -d "$start_time" "+%s")
seconds_to_add=$((interval * 86400))
stop_timestamp=$((parsed_start + seconds_to_add))
stop_time=$(date -d "@$stop_timestamp" "+%Y-%m-%d %H:%M:%S")

stop_minute=$(date -d "$stop_time" "+%M")
stop_hour=$(date -d "$stop_time" "+%H")
stop_day=$(date -d "$stop_time" "+%d")
stop_month=$(date -d "$stop_time" "+%m")
stop_day_of_week=$(date -d "$stop_time" "+%w")

# Full paths to scripts
run_script="${SCRIPT_DIR}/run-datacollector.sh"
stop_script="${SCRIPT_DIR}/stop-datacollector.sh"

# Make sure scripts are executable
chmod +x "$run_script"
chmod +x "$stop_script"

# Create the cron entries
start_cron="$start_minute $start_hour $start_day $start_month * $run_script > ${SCRIPT_DIR}/log/run-datacollector.log 2>&1"
stop_cron="$stop_minute $stop_hour $stop_day $stop_month * $stop_script > ${SCRIPT_DIR}/log/stop-datacollector.log 2>&1"

# Create a config file to pass variables to run-datacollector.sh
cat > "$CONFIG_FILE" << EOL
# Configuration for data collectors
# Generated by schedule-datacollector.sh on $(date)

# Enable/disable collectors
ENABLE_ARGUS=$enable_argus
ENABLE_ZEEK=$enable_zeek
ENABLE_NFPCAPD=$enable_nfpcapd

# Interface configuration
ARGUS_INTERFACE=$argus_interface
NFPCAPD_INTERFACE=$nfpcapd_interface

# Output directories
ARGUS_OUTPUTDIR=$argus_outputdir
NFPCAPD_OUTPUTDIR=$nfpcapd_outputdir
EOL

print_info "Created configuration file at $CONFIG_FILE"

# Check if cron entries already exist and remove them
temp_cron=$(mktemp)
crontab -l 2>/dev/null | grep -v "$run_script\|$stop_script" > "$temp_cron"

# Add new cron entries
echo "$start_cron" >> "$temp_cron"
echo "$stop_cron" >> "$temp_cron"
crontab "$temp_cron"
rm "$temp_cron"

print_success "Scheduled data collector jobs:"
print_info "- Start: $start_time (in $interval days)"
print_info "- Stop: $stop_time"

# Display enabled collectors
if [ "$enable_argus" = "true" ]; then
    print_success "Argus is scheduled to run on interface $argus_interface"
else
    print_warning "Argus is disabled"
fi

if [ "$enable_zeek" = "true" ]; then
    print_success "Zeek is scheduled to run"
else
    print_warning "Zeek is disabled"
fi

if [ "$enable_nfpcapd" = "true" ]; then
    print_success "nfpcapd is scheduled to run on interface $nfpcapd_interface"
else
    print_warning "nfpcapd is disabled"
fi
